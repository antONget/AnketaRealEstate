from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, StateFilter, or_f
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from keyboards import user_keyboards as kb
from config_data.config import Config, load_config
from database import requests as rq
from utils.error_handling import error_handler
from filter.filter import validate_russian_phone_number
from utils.send_admins import send_message_admins
import logging
router = Router()
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()


class User(StatesGroup):
    input_other = State()
    type_wall = State()
    phone = State()


@router.message(CommandStart())
@error_handler
async def process_start_command_user(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ—Å–ª–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start
    1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –Ω–µ–π
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_start_command_user: {message.chat.id}')
    await state.set_state(state=None)
    await state.clear()
    if message.from_user.username:
        username = message.from_user.username
    else:
        username = 'username'
    await rq.add_user(tg_id=message.chat.id,
                      data={"tg_id": message.chat.id, "username": username})
    await message.answer(text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                         reply_markup=kb.keyboards_start_user())
    await message.answer(text=f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?',
                         reply_markup=kb.keyboard_bay_sell())


@router.message(F.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_start_command_user: {message.chat.id}')
    await state.set_state(state=None)
    await state.clear()
    await process_start_command_user(message=message, state=state, bot=bot)


@router.callback_query(F.data.startswith("estate_"))
@error_handler
async def type_real_estate(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ [–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫, –î–æ–º, –ö–≤–∞—Ä—Ç–∏—Ä–∞]
    :param callback: [estate_bay, estate_sell]
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'type_real_estate {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    await state.update_data(payment=answer)
    if answer == 'sell':
        await callback.message.edit_text(text=f'–ö–∞–∫–æ–π —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?',
                                         reply_markup=kb.keyboard_type_estate_real())
    else:
        await callback.message.edit_text(text=f'–ö–∞–∫–æ–π —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –í—ã –∏—â–µ—Ç–µ?',
                                         reply_markup=kb.keyboard_type_estate_real())
    await callback.answer()


@router.callback_query(F.data.startswith("type_estate_"))
@error_handler
async def type_real_estate(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    :param callback: [type_estate_land, type_estate_house, type_estate_flat]
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'type_real_estate {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    await state.update_data(type=answer)
    data = await state.get_data()
    if data['payment'] == 'sell':
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
        if answer == 'land':
            await state.update_data(type_e="–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫")
        elif answer == 'house':
            await state.update_data(type_e="–î–æ–º")
        elif answer == 'flat':
            await state.update_data(type_e="–ö–≤–∞—Ä—Ç–∏—Ä–∞")
        await callback.message.answer(text=f'–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç',
                                      reply_markup=kb.keyboard_phone())
        await state.set_state(await state.set_state(User.phone))
        await callback.answer()
        return
    if answer == 'land':
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
        await callback.message.answer(text=f'–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                                      reply_markup=kb.keyboard_type_land())
        await state.update_data(type_e="–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫")
    elif answer == 'house':
        await callback.message.edit_text(text=f'–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ?',
                                         reply_markup=kb.keyboard_type_estate_house())
        await state.update_data(type_e="–î–æ–º")
    elif answer == 'flat':
        await callback.message.answer(text=f'–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç',
                                      reply_markup=kb.keyboard_phone())
        await state.update_data(type_e="–ö–≤–∞—Ä—Ç–∏—Ä–∞")
        await state.set_state(User.phone)
    await callback.answer()


@router.callback_query(F.data.startswith('type_house'))
@error_handler
async def process_house(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–¥–µ–Ω–∏—è –æ–± —É—á–∞—Å—Ç–∫–µ –¥–ª—è –¥–æ–º–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    :param callback: type_house_yes
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'type_real_estate {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    await state.update_data(land=answer)
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    await callback.message.answer(text=f'–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                                  reply_markup=kb.keyboard_type_land())
    await callback.answer()


@router.message(F.text == '–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç')
@error_handler
async def process_input_other(message: Message, state: FSMContext, bot: Bot):
    """
    –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_start_command_user: {message.chat.id}')
    await message.answer(text=f'–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç?')
    await state.set_state(User.input_other)


@router.message(lambda message: message.text in ['–°–µ–≤–µ—Ä (–í—ã–±–æ—Ä–≥—Å–∫–∏–π, –ü—Ä–∏–æ–∑–µ—Ä—Å–∫–∏–π, –í—Å–µ–≤–æ–ª–æ–∂—Å–∫–∏–π —Ä-–Ω)',
                                                 '–Æ–ì (–ì–∞—Ç—á–∏–Ω—Å–∫–∏–π, –õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∏–π, –¢–æ—Å–Ω–µ–Ω—Å–∫–∏–π, –ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π)',
                                                 '–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫ (–ö–∏—Ä–æ–≤—Å–∫–∏–π, –í—Å–µ–≤–æ–ª–æ–∂—Å–∫–∏–π)',
                                                 '–¢–æ–ª—å–∫–æ –≤ –≥—Ä–∞–Ω–∏—Ü–µ –°–ü–ë'])
@router.message(StateFilter(User.input_other))
@error_handler
async def get_input_other(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_input_other: {message.chat.id}')
    await state.set_state(state=None)
    # await message.answer(text='–û—Ç–ª–∏—á–Ω–æ ',
    #                      reply_markup=ReplyKeyboardRemove())
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ ',
                         reply_markup=kb.keyboards_start_user())
    # await bot.delete_message(chat_id=message.chat.id,
    #                          message_id=message.message_id + 1)
    # await bot.delete_message(chat_id=message.chat.id,
    #                          message_id=message.message_id + 2)
    data = await state.get_data()
    if data['type'] == 'land':
        await state.update_data(district=message.text)
        await message.answer(text=f'–ö–∞–∫–æ–π –ø–ª–æ—â–∞–¥–∏ —É—á–∞—Å—Ç–æ–∫ –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?',
                             reply_markup=kb.keyboard_type_land_area())
    elif data['type'] == 'house':
        await state.update_data(district=message.text)
        await message.answer(text=f'–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–æ–º–∞?',
                             reply_markup=kb.keyboard_type_wall())


@router.callback_query(F.data.startswith('land_area'))
@error_handler
async def get_land_area(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_land_area {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    await state.update_data(land_area=answer)
    await callback.message.edit_text(text='–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?',
                                     reply_markup=kb.keyboard_payment_option())
    await callback.answer()


@router.callback_query(F.data.startswith('payment_option'))
@error_handler
async def get_payment_option(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_payment_option {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    data = await state.get_data()
    if data['type'] == 'land':
        await state.update_data(payment_option=answer)
        await callback.message.edit_text(text='–í –∫–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å —É—á–∞—Å—Ç–æ–∫?',
                                         reply_markup=kb.keyboard_deadline())
    elif data['type'] == 'house':
        await state.update_data(payment_option=answer)
        await callback.message.edit_text(text='–í –∫–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã –≤—ã–π—Ç–∏ –Ω–∞ —Å–¥–µ–ª–∫—É?',
                                         reply_markup=kb.keyboard_deadline_house())
    await callback.answer()


@router.callback_query(F.data.startswith('deadline'))
@error_handler
async def get_deadline(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_deadline {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    await state.update_data(deadline=answer)
    await state.set_state(User.phone)
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    await callback.message.answer(text=f'–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç',
                                  reply_markup=kb.keyboard_phone())



    # await callback.message.answer(text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ç–≤–µ—Ç—ã, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
    # await callback.answer()
    # data = await state.get_data()
    # text = ''
    # if data["type"] == "land":
    #     text = f'<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n\n' \
    #            f'<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> @{callback.from_user.username if callback.from_user.username else "–ù–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"}/{callback.message.chat.id}\n' \
    #            f'<i>–¢–∏–ø –∑–∞—è–≤–∫–∏:</i> {"–ü–æ–∫—É–ø–∫–∞" if data["payment"] == "bay" else "–ü—Ä–æ–¥–∞–∂–∞"}\n' \
    #            f'<i>–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</i> {data["type_e"]}\n' \
    #            f'<i>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</i> {data["district"]}\n' \
    #            f'<i>–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞:</i> {data["land_area"]} —Å–æ—Ç–æ–∫\n' \
    #            f'<i>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</i> {data["payment_option"]}\n' \
    #            f'<i>–°—Ä–æ–∫ –ø–æ–∫—É–ø–∫–∏:</i> {data["deadline"]}\n'
    # elif data["type"] == "house":
    #     text = f'<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n\n' \
    #            f'<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> @{callback.from_user.username if callback.from_user.username else "–ù–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"}/{callback.message.chat.id}\n' \
    #            f'<i>–¢–∏–ø –∑–∞—è–≤–∫–∏:</i> {"–ü–æ–∫—É–ø–∫–∞" if data["payment"] == "bay" else "–ü—Ä–æ–¥–∞–∂–∞"}\n' \
    #            f'<i>–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</i> {data["type_e"]}\n' \
    #            f'<i>–ï—Å—Ç—å —É—á–∞—Å—Ç–æ–∫?:</i> {data["land"]}\n' \
    #            f'<i>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</i> {data["district"]}\n' \
    #            f'<i>–¢–∏–ø —Å—Ç–µ–Ω:</i> {data["type_wall"]}\n' \
    #            f'<i>–ë—é–¥–∂–µ—Ç:</i> {data["budget"]}\n' \
    #            f'<i>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</i> {data["payment_option"]}\n' \
    #            f'<i>–°—Ä–æ–∫ –ø–æ–∫—É–ø–∫–∏:</i> {data["deadline"]}\n'
    # await bot.send_message(chat_id=config.tg_bot.channel,
    #                        text=text)


@router.callback_query(F.data.startswith('type_wall'))
@error_handler
async def get_payment_option(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å—Ç–µ–Ω
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_payment_option {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    if answer == 'other':
        await callback.message.edit_text(text='–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–æ–º–∞?')
        await state.set_state(User.type_wall)
        return
    await state.update_data(type_wall=answer)
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, —Ä—É–±.',
                                     reply_markup=kb.keyboard_budget())
    await callback.answer()


@router.message(StateFilter(User.type_wall))
@error_handler
async def get_type_wall_other(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å—Ç–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_payment_option {message.chat.id}')
    await state.update_data(type_wall=message.text)
    await state.set_state(state=None)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, —Ä—É–±.',
                         reply_markup=kb.keyboard_budget())


@router.callback_query(F.data.startswith('budget'))
@error_handler
async def get_payment_option(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º –±—é–¥–∂–µ—Ç
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_payment_option {callback.message.chat.id}')
    answer = callback.data.split('_')[-1]
    await state.update_data(budget=answer)
    await callback.message.edit_text(text='–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?',
                                     reply_markup=kb.keyboard_payment_option())
    await callback.answer()


@router.message(or_f(F.text, F.contact), StateFilter(User.phone))
@error_handler
async def process_validate_russian_phone_number(message: Message, state: FSMContext, bot: Bot) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–≤–æ–¥–∏–º –µ–≥–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é). –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    logging.info("process_start_command_user")
    if message.contact:
        phone = str(message.contact.phone_number)
    else:
        phone = message.text
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 89991112222:")
            return
    await state.update_data(phone=phone)
    await message.answer(text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ç–≤–µ—Ç—ã, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
                         reply_markup=kb.keyboards_start_user())
    data = await state.get_data()
    text = ''
    if data["type"] == "sell":
        text = f'<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n\n' \
               f'<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> @{message.from_user.username if message.from_user.username else "–ù–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"}/{message.chat.id}\n' \
               f'<i>–¢–∏–ø –∑–∞—è–≤–∫–∏:</i> {"–ü–æ–∫—É–ø–∫–∞" if data["payment"] == "bay" else "–ü—Ä–æ–¥–∞–∂–∞"}\n' \
               f'<i>–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</i> {data["type_e"]}\n' \
               f'<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i> {data["phone"]}'
    else:
        if data["type"] == "flat":
            text = f'<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n\n' \
                   f'<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> @{message.from_user.username if message.from_user.username else "–ù–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"}/{message.chat.id}\n' \
                   f'<i>–¢–∏–ø –∑–∞—è–≤–∫–∏:</i> {"–ü–æ–∫—É–ø–∫–∞" if data["payment"] == "bay" else "–ü—Ä–æ–¥–∞–∂–∞"}\n' \
                   f'<i>–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</i> {data["type_e"]}\n' \
                   f'<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i> {data["phone"]}'
        elif data["type"] == "land":
            text = f'<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n\n' \
                   f'<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> @{message.from_user.username if message.from_user.username else "–ù–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"}/{message.chat.id}\n' \
                   f'<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i> {data["phone"]}\n' \
                   f'<i>–¢–∏–ø –∑–∞—è–≤–∫–∏:</i> {"–ü–æ–∫—É–ø–∫–∞" if data["payment"] == "bay" else "–ü—Ä–æ–¥–∞–∂–∞"}\n' \
                   f'<i>–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</i> {data["type_e"]}\n' \
                   f'<i>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</i> {data["district"]}\n' \
                   f'<i>–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞:</i> {data["land_area"]} —Å–æ—Ç–æ–∫\n' \
                   f'<i>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</i> {data["payment_option"]}\n' \
                   f'<i>–°—Ä–æ–∫ –ø–æ–∫—É–ø–∫–∏:</i> {data["deadline"]}\n'
        elif data["type"] == "house":
            text = f'<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n\n' \
                   f'<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> @{message.from_user.username if message.from_user.username else "–ù–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"}/{message.chat.id}\n' \
                   f'<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i> {data["phone"]}\n' \
                   f'<i>–¢–∏–ø –∑–∞—è–≤–∫–∏:</i> {"–ü–æ–∫—É–ø–∫–∞" if data["payment"] == "bay" else "–ü—Ä–æ–¥–∞–∂–∞"}\n' \
                   f'<i>–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</i> {data["type_e"]}\n' \
                   f'<i>–ï—Å—Ç—å —É—á–∞—Å—Ç–æ–∫?:</i> {data["land"]}\n' \
                   f'<i>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</i> {data["district"]}\n' \
                   f'<i>–¢–∏–ø —Å—Ç–µ–Ω:</i> {data["type_wall"]}\n' \
                   f'<i>–ë—é–¥–∂–µ—Ç:</i> {data["budget"]}\n' \
                   f'<i>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</i> {data["payment_option"]}\n' \
                   f'<i>–°—Ä–æ–∫ –ø–æ–∫—É–ø–∫–∏:</i> {data["deadline"]}\n'
    await bot.send_message(chat_id=config.tg_bot.channel,
                           text=text)

